import express from "express";
import expressAsyncHandler from "express-async-handler";
import bcrypt from "bcryptjs";
import data from "../data.js";
import User from "../models/userModel.js";
import { generateToken, isAdmin, isAuth } from "../utils.js";

{
  /* express.Router makes code modular:
    -- instead of having all the routes in server.js
    -- you can define multiple files to have your routers */
}
const userRouter = express.Router();

// hashSync in data.js hashes your passwords
/* api request for initial seeding of users in DB */
userRouter.get(
  "/seed",
  expressAsyncHandler(async (req, res) => {
    await User.remove({});
    {
      /* remove all users to prevent duplicates */
    }
    {
      /* insert users into collection witin MongoDB */
    }
    const createdUsers = await User.insertMany(data.users);
    {
      /* send back createdUsers */
    }
    res.send({ createdUsers });
  })
);
{
  /* initiating POST request for signin */
}
userRouter.post(
  "/signin",
  expressAsyncHandler(async (req, res) => {
    {
      /* comparing email in DB with email in body of this request */
    }
    const user = await User.findOne({ email: req.body.email });
    if (user) {
      if (bcrypt.compareSync(req.body.password, user.password)) {
        res.send({
          _id: user._id,
          name: user.name,
          email: user.email,
          isAdmin: user.isAdmin,
          token: generateToken(user),
        });
        return;
      }
    }
    res.status(401).send({ message: "Invalid email or password." });
  })
);

{
  /* router for posting user data in register page
    -- The number '8' is a salt that is generated
       salt contains number of rounds so bcrypt.hashSync
       function knows how many rounds it has to do.
       So does hash is not a simple hash, but a container with 
       embedded salt.
*/
}
userRouter.post(
  "/register",
  expressAsyncHandler(async (req, res) => {
    const user = new User({
      name: req.body.name,
      email: req.body.email,
      password: bcrypt.hashSync(req.body.password, 8),
    });
    {
      /* create new user & set new user to created user
         sends back user info plus the token to the frontend
         generated by generateToken()
      */
    }
    const createdUser = await user.save();
    res.send({
      _id: createdUser._id,
      name: createdUser.name,
      email: createdUser.email,
      isAdmin: createdUser.isAdmin,
      token: generateToken(createdUser),
    });
  })
);

/* api to request user details */
userRouter.get(
  "/:id",
  expressAsyncHandler(async (req, res) => {
    const user = await User.findById(req.params.id);
    if (user) {
      res.send(user);
    } else {
      res.status(404).send({ message: "User Not Found" });
    }
  })
);

userRouter.put(
  "/profile",
  isAuth,
  expressAsyncHandler(async (req, res) => {
    const user = await User.findById(req.user._id);
    if (user) {
      user.name = req.body.name || user.name; //if user enters nothing, use the previous name in the DB
      user.email = req.body.email || user.email;
      if (req.body.password) {
        user.password = bcrypt.hashSync(req.body.password, 8); //encrypt password, using 8 to generate salt
      }
      const updatedUser = await user.save(); //save user to DB
      res.send({
        _id: updatedUser._id,
        name: updatedUser.name,
        email: updatedUser.email,
        isAdmin: updatedUser.isAdmin,
        token: generateToken(updatedUser),
      });
    }
  })
);
/* api request to retrieve all users */
userRouter.get(
  "/",
  isAuth,
  isAdmin,
  expressAsyncHandler(async (req, res) => {
    const users = await User.find({}); //return all users
    res.send(users);
  })
);

userRouter.delete(
  "/:id",
  isAuth,
  isAdmin,
  expressAsyncHandler(async (req, res) => {
    const user = await User.findById(req.params.id);
    if (user) {
      if (user.email === "admin@example.com") {
        res
          .status(400)
          .send({ message: "Forbidden! Cannot Delete Admin User." });
        return; //no need to run the lines below if user tries to delete admin user.
      }
      const deleteUser = await user.remove();
      res.send({ message: "User Deleted", user: deleteUser });
    } else {
      res.status(404).send({ message: "User Not Found" });
    }
  })
);

/* api request to update user */
userRouter.put(
  "/:id",
  isAuth,
  isAdmin,
  expressAsyncHandler(async (req, res) => {
    const user = await User.findById(req.params.id);
    if (user) {
      user.name = req.body.name || user.name;
      user.email = req.body.email || user.email;
      user.isSeller = req.body.isSeller || user.isSeller;
      user.isAdmin = req.body.isAdmin || user.isAdmin;
      const updatedUser = await user.save();
      res.send({ message: "User Updated", user: updatedUser });
    } else {
      res.status(404).send({ message: "User Not Found" });
    }
  })
);

export default userRouter;
